<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="MatthiasMullie\Minify\JS" namespace="MatthiasMullie\Minify" name="JS" abstract="false" final="false" start="15" end="498">
  <file path="/home/dara/Documents/work/unigestion/php-doc-generator/minify/src" file="JS.php" realpath="/home/dara/Documents/work/unigestion/php-doc-generator/minify/src/JS.php" size="33805" time="2016-04-29T04:18:41+00:00" unixtime="1461903521" sha1="29c615d3c746af6009ea6eda9e6648bcfff3b4dc" relative="src/JS.php"/>
  <docblock>
    <description compact="JavaScript minifier.">Please report bugs on https://github.com/matthiasmullie/minify/issues</description>
    <author value="Matthias Mullie &lt;minify@mullie.eu&gt;"/>
    <author value="Tijs Verkoyen &lt;minify@verkoyen.eu&gt;"/>
    <copyright value="Copyright (c) 2012, Matthias Mullie. All rights reserved."/>
    <license name="MIT License"/>
  </docblock>
  <extends full="MatthiasMullie\Minify\Minify" namespace="MatthiasMullie\Minify" name="Minify"/>
  <constant type="string" name="REGEX_VARIABLE" value="'\b[$A-Z\_a-z\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\x{02c1}\x{02c6}-\x{02d1}\x{02e0}-\x{02e4}\x{02ec}\x{02ee}\x{0370}-\x{0374}\x{0376}\x{0377}\x{037a}-\x{037d}\x{0386}\x{0388}-\x{038a}\x{038c}\x{038e}-\x{03a1}\x{03a3}-\x{03f5}\x{03f7}-\x{0481}\x{048a}-\x{0527}\x{0531}-\x{0556}\x{0559}\x{0561}-\x{0587}\x{05d0}-\x{05ea}\x{05f0}-\x{05f2}\x{0620}-\x{064a}\x{066e}\x{066f}\x{0671}-\x{06d3}\x{06d5}\x{06e5}\x{06e6}\x{06ee}\x{06ef}\x{06fa}-\x{06fc}\x{06ff}\x{0710}\x{0712}-\x{072f}\x{074d}-\x{07a5}\x{07b1}\x{07ca}-\x{07ea}\x{07f4}\x{07f5}\x{07fa}\x{0800}-\x{0815}\x{081a}\x{0824}\x{0828}\x{0840}-\x{0858}\x{08a0}\x{08a2}-\x{08ac}\x{0904}-\x{0939}\x{093d}\x{0950}\x{0958}-\x{0961}\x{0971}-\x{0977}\x{0979}-\x{097f}\x{0985}-\x{098c}\x{098f}\x{0990}\x{0993}-\x{09a8}\x{09aa}-\x{09b0}\x{09b2}\x{09b6}-\x{09b9}\x{09bd}\x{09ce}\x{09dc}\x{09dd}\x{09df}-\x{09e1}\x{09f0}\x{09f1}\x{0a05}-\x{0a0a}\x{0a0f}\x{0a10}\x{0a13}-\x{0a28}\x{0a2a}-\x{0a30}\x{0a32}\x{0a33}\x{0a35}\x{0a36}\x{0a38}\x{0a39}\x{0a59}-\x{0a5c}\x{0a5e}\x{0a72}-\x{0a74}\x{0a85}-\x{0a8d}\x{0a8f}-\x{0a91}\x{0a93}-\x{0aa8}\x{0aaa}-\x{0ab0}\x{0ab2}\x{0ab3}\x{0ab5}-\x{0ab9}\x{0abd}\x{0ad0}\x{0ae0}\x{0ae1}\x{0b05}-\x{0b0c}\x{0b0f}\x{0b10}\x{0b13}-\x{0b28}\x{0b2a}-\x{0b30}\x{0b32}\x{0b33}\x{0b35}-\x{0b39}\x{0b3d}\x{0b5c}\x{0b5d}\x{0b5f}-\x{0b61}\x{0b71}\x{0b83}\x{0b85}-\x{0b8a}\x{0b8e}-\x{0b90}\x{0b92}-\x{0b95}\x{0b99}\x{0b9a}\x{0b9c}\x{0b9e}\x{0b9f}\x{0ba3}\x{0ba4}\x{0ba8}-\x{0baa}\x{0bae}-\x{0bb9}\x{0bd0}\x{0c05}-\x{0c0c}\x{0c0e}-\x{0c10}\x{0c12}-\x{0c28}\x{0c2a}-\x{0c33}\x{0c35}-\x{0c39}\x{0c3d}\x{0c58}\x{0c59}\x{0c60}\x{0c61}\x{0c85}-\x{0c8c}\x{0c8e}-\x{0c90}\x{0c92}-\x{0ca8}\x{0caa}-\x{0cb3}\x{0cb5}-\x{0cb9}\x{0cbd}\x{0cde}\x{0ce0}\x{0ce1}\x{0cf1}\x{0cf2}\x{0d05}-\x{0d0c}\x{0d0e}-\x{0d10}\x{0d12}-\x{0d3a}\x{0d3d}\x{0d4e}\x{0d60}\x{0d61}\x{0d7a}-\x{0d7f}\x{0d85}-\x{0d96}\x{0d9a}-\x{0db1}\x{0db3}-\x{0dbb}\x{0dbd}\x{0dc0}-\x{0dc6}\x{0e01}-\x{0e30}\x{0e32}\x{0e33}\x{0e40}-\x{0e46}\x{0e81}\x{0e82}\x{0e84}\x{0e87}\x{0e88}\x{0e8a}\x{0e8d}\x{0e94}-\x{0e97}\x{0e99}-\x{0e9f}\x{0ea1}-\x{0ea3}\x{0ea5}\x{0ea7}\x{0eaa}\x{0eab}\x{0ead}-\x{0eb0}\x{0eb2}\x{0eb3}\x{0ebd}\x{0ec0}-\x{0ec4}\x{0ec6}\x{0edc}-\x{0edf}\x{0f00}\x{0f40}-\x{0f47}\x{0f49}-\x{0f6c}\x{0f88}-\x{0f8c}\x{1000}-\x{102a}\x{103f}\x{1050}-\x{1055}\x{105a}-\x{105d}\x{1061}\x{1065}\x{1066}\x{106e}-\x{1070}\x{1075}-\x{1081}\x{108e}\x{10a0}-\x{10c5}\x{10c7}\x{10cd}\x{10d0}-\x{10fa}\x{10fc}-\x{1248}\x{124a}-\x{124d}\x{1250}-\x{1256}\x{1258}\x{125a}-\x{125d}\x{1260}-\x{1288}\x{128a}-\x{128d}\x{1290}-\x{12b0}\x{12b2}-\x{12b5}\x{12b8}-\x{12be}\x{12c0}\x{12c2}-\x{12c5}\x{12c8}-\x{12d6}\x{12d8}-\x{1310}\x{1312}-\x{1315}\x{1318}-\x{135a}\x{1380}-\x{138f}\x{13a0}-\x{13f4}\x{1401}-\x{166c}\x{166f}-\x{167f}\x{1681}-\x{169a}\x{16a0}-\x{16ea}\x{16ee}-\x{16f0}\x{1700}-\x{170c}\x{170e}-\x{1711}\x{1720}-\x{1731}\x{1740}-\x{1751}\x{1760}-\x{176c}\x{176e}-\x{1770}\x{1780}-\x{17b3}\x{17d7}\x{17dc}\x{1820}-\x{1877}\x{1880}-\x{18a8}\x{18aa}\x{18b0}-\x{18f5}\x{1900}-\x{191c}\x{1950}-\x{196d}\x{1970}-\x{1974}\x{1980}-\x{19ab}\x{19c1}-\x{19c7}\x{1a00}-\x{1a16}\x{1a20}-\x{1a54}\x{1aa7}\x{1b05}-\x{1b33}\x{1b45}-\x{1b4b}\x{1b83}-\x{1ba0}\x{1bae}\x{1baf}\x{1bba}-\x{1be5}\x{1c00}-\x{1c23}\x{1c4d}-\x{1c4f}\x{1c5a}-\x{1c7d}\x{1ce9}-\x{1cec}\x{1cee}-\x{1cf1}\x{1cf5}\x{1cf6}\x{1d00}-\x{1dbf}\x{1e00}-\x{1f15}\x{1f18}-\x{1f1d}\x{1f20}-\x{1f45}\x{1f48}-\x{1f4d}\x{1f50}-\x{1f57}\x{1f59}\x{1f5b}\x{1f5d}\x{1f5f}-\x{1f7d}\x{1f80}-\x{1fb4}\x{1fb6}-\x{1fbc}\x{1fbe}\x{1fc2}-\x{1fc4}\x{1fc6}-\x{1fcc}\x{1fd0}-\x{1fd3}\x{1fd6}-\x{1fdb}\x{1fe0}-\x{1fec}\x{1ff2}-\x{1ff4}\x{1ff6}-\x{1ffc}\x{2071}\x{207f}\x{2090}-\x{209c}\x{2102}\x{2107}\x{210a}-\x{2113}\x{2115}\x{2119}-\x{211d}\x{2124}\x{2126}\x{2128}\x{212a}-\x{212d}\x{212f}-\x{2139}\x{213c}-\x{213f}\x{2145}-\x{2149}\x{214e}\x{2160}-\x{2188}\x{2c00}-\x{2c2e}\x{2c30}-\x{2c5e}\x{2c60}-\x{2ce4}\x{2ceb}-\x{2cee}\x{2cf2}\x{2cf3}\x{2d00}-\x{2d25}\x{2d27}\x{2d2d}\x{2d30}-\x{2d67}\x{2d6f}\x{2d80}-\x{2d96}\x{2da0}-\x{2da6}\x{2da8}-\x{2dae}\x{2db0}-\x{2db6}\x{2db8}-\x{2dbe}\x{2dc0}-\x{2dc6}\x{2dc8}-\x{2dce}\x{2dd0}-\x{2dd6}\x{2dd8}-\x{2dde}\x{2e2f}\x{3005}-\x{3007}\x{3021}-\x{3029}\x{3031}-\x{3035}\x{3038}-\x{303c}\x{3041}-\x{3096}\x{309d}-\x{309f}\x{30a1}-\x{30fa}\x{30fc}-\x{30ff}\x{3105}-\x{312d}\x{3131}-\x{318e}\x{31a0}-\x{31ba}\x{31f0}-\x{31ff}\x{3400}-\x{4db5}\x{4e00}-\x{9fcc}\x{a000}-\x{a48c}\x{a4d0}-\x{a4fd}\x{a500}-\x{a60c}\x{a610}-\x{a61f}\x{a62a}\x{a62b}\x{a640}-\x{a66e}\x{a67f}-\x{a697}\x{a6a0}-\x{a6ef}\x{a717}-\x{a71f}\x{a722}-\x{a788}\x{a78b}-\x{a78e}\x{a790}-\x{a793}\x{a7a0}-\x{a7aa}\x{a7f8}-\x{a801}\x{a803}-\x{a805}\x{a807}-\x{a80a}\x{a80c}-\x{a822}\x{a840}-\x{a873}\x{a882}-\x{a8b3}\x{a8f2}-\x{a8f7}\x{a8fb}\x{a90a}-\x{a925}\x{a930}-\x{a946}\x{a960}-\x{a97c}\x{a984}-\x{a9b2}\x{a9cf}\x{aa00}-\x{aa28}\x{aa40}-\x{aa42}\x{aa44}-\x{aa4b}\x{aa60}-\x{aa76}\x{aa7a}\x{aa80}-\x{aaaf}\x{aab1}\x{aab5}\x{aab6}\x{aab9}-\x{aabd}\x{aac0}\x{aac2}\x{aadb}-\x{aadd}\x{aae0}-\x{aaea}\x{aaf2}-\x{aaf4}\x{ab01}-\x{ab06}\x{ab09}-\x{ab0e}\x{ab11}-\x{ab16}\x{ab20}-\x{ab26}\x{ab28}-\x{ab2e}\x{abc0}-\x{abe2}\x{ac00}-\x{d7a3}\x{d7b0}-\x{d7c6}\x{d7cb}-\x{d7fb}\x{f900}-\x{fa6d}\x{fa70}-\x{fad9}\x{fb00}-\x{fb06}\x{fb13}-\x{fb17}\x{fb1d}\x{fb1f}-\x{fb28}\x{fb2a}-\x{fb36}\x{fb38}-\x{fb3c}\x{fb3e}\x{fb40}\x{fb41}\x{fb43}\x{fb44}\x{fb46}-\x{fbb1}\x{fbd3}-\x{fd3d}\x{fd50}-\x{fd8f}\x{fd92}-\x{fdc7}\x{fdf0}-\x{fdfb}\x{fe70}-\x{fe74}\x{fe76}-\x{fefc}\x{ff21}-\x{ff3a}\x{ff41}-\x{ff5a}\x{ff66}-\x{ffbe}\x{ffc2}-\x{ffc7}\x{ffca}-\x{ffcf}\x{ffd2}-\x{ffd7}\x{ffda}-\x{ffdc}][$A-Z\_a-z\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\x{02c1}\x{02c6}-\x{02d1}\x{02e0}-\x{02e4}\x{02ec}\x{02ee}\x{0370}-\x{0374}\x{0376}\x{0377}\x{037a}-\x{037d}\x{0386}\x{0388}-\x{038a}\x{038c}\x{038e}-\x{03a1}\x{03a3}-\x{03f5}\x{03f7}-\x{0481}\x{048a}-\x{0527}\x{0531}-\x{0556}\x{0559}\x{0561}-\x{0587}\x{05d0}-\x{05ea}\x{05f0}-\x{05f2}\x{0620}-\x{064a}\x{066e}\x{066f}\x{0671}-\x{06d3}\x{06d5}\x{06e5}\x{06e6}\x{06ee}\x{06ef}\x{06fa}-\x{06fc}\x{06ff}\x{0710}\x{0712}-\x{072f}\x{074d}-\x{07a5}\x{07b1}\x{07ca}-\x{07ea}\x{07f4}\x{07f5}\x{07fa}\x{0800}-\x{0815}\x{081a}\x{0824}\x{0828}\x{0840}-\x{0858}\x{08a0}\x{08a2}-\x{08ac}\x{0904}-\x{0939}\x{093d}\x{0950}\x{0958}-\x{0961}\x{0971}-\x{0977}\x{0979}-\x{097f}\x{0985}-\x{098c}\x{098f}\x{0990}\x{0993}-\x{09a8}\x{09aa}-\x{09b0}\x{09b2}\x{09b6}-\x{09b9}\x{09bd}\x{09ce}\x{09dc}\x{09dd}\x{09df}-\x{09e1}\x{09f0}\x{09f1}\x{0a05}-\x{0a0a}\x{0a0f}\x{0a10}\x{0a13}-\x{0a28}\x{0a2a}-\x{0a30}\x{0a32}\x{0a33}\x{0a35}\x{0a36}\x{0a38}\x{0a39}\x{0a59}-\x{0a5c}\x{0a5e}\x{0a72}-\x{0a74}\x{0a85}-\x{0a8d}\x{0a8f}-\x{0a91}\x{0a93}-\x{0aa8}\x{0aaa}-\x{0ab0}\x{0ab2}\x{0ab3}\x{0ab5}-\x{0ab9}\x{0abd}\x{0ad0}\x{0ae0}\x{0ae1}\x{0b05}-\x{0b0c}\x{0b0f}\x{0b10}\x{0b13}-\x{0b28}\x{0b2a}-\x{0b30}\x{0b32}\x{0b33}\x{0b35}-\x{0b39}\x{0b3d}\x{0b5c}\x{0b5d}\x{0b5f}-\x{0b61}\x{0b71}\x{0b83}\x{0b85}-\x{0b8a}\x{0b8e}-\x{0b90}\x{0b92}-\x{0b95}\x{0b99}\x{0b9a}\x{0b9c}\x{0b9e}\x{0b9f}\x{0ba3}\x{0ba4}\x{0ba8}-\x{0baa}\x{0bae}-\x{0bb9}\x{0bd0}\x{0c05}-\x{0c0c}\x{0c0e}-\x{0c10}\x{0c12}-\x{0c28}\x{0c2a}-\x{0c33}\x{0c35}-\x{0c39}\x{0c3d}\x{0c58}\x{0c59}\x{0c60}\x{0c61}\x{0c85}-\x{0c8c}\x{0c8e}-\x{0c90}\x{0c92}-\x{0ca8}\x{0caa}-\x{0cb3}\x{0cb5}-\x{0cb9}\x{0cbd}\x{0cde}\x{0ce0}\x{0ce1}\x{0cf1}\x{0cf2}\x{0d05}-\x{0d0c}\x{0d0e}-\x{0d10}\x{0d12}-\x{0d3a}\x{0d3d}\x{0d4e}\x{0d60}\x{0d61}\x{0d7a}-\x{0d7f}\x{0d85}-\x{0d96}\x{0d9a}-\x{0db1}\x{0db3}-\x{0dbb}\x{0dbd}\x{0dc0}-\x{0dc6}\x{0e01}-\x{0e30}\x{0e32}\x{0e33}\x{0e40}-\x{0e46}\x{0e81}\x{0e82}\x{0e84}\x{0e87}\x{0e88}\x{0e8a}\x{0e8d}\x{0e94}-\x{0e97}\x{0e99}-\x{0e9f}\x{0ea1}-\x{0ea3}\x{0ea5}\x{0ea7}\x{0eaa}\x{0eab}\x{0ead}-\x{0eb0}\x{0eb2}\x{0eb3}\x{0ebd}\x{0ec0}-\x{0ec4}\x{0ec6}\x{0edc}-\x{0edf}\x{0f00}\x{0f40}-\x{0f47}\x{0f49}-\x{0f6c}\x{0f88}-\x{0f8c}\x{1000}-\x{102a}\x{103f}\x{1050}-\x{1055}\x{105a}-\x{105d}\x{1061}\x{1065}\x{1066}\x{106e}-\x{1070}\x{1075}-\x{1081}\x{108e}\x{10a0}-\x{10c5}\x{10c7}\x{10cd}\x{10d0}-\x{10fa}\x{10fc}-\x{1248}\x{124a}-\x{124d}\x{1250}-\x{1256}\x{1258}\x{125a}-\x{125d}\x{1260}-\x{1288}\x{128a}-\x{128d}\x{1290}-\x{12b0}\x{12b2}-\x{12b5}\x{12b8}-\x{12be}\x{12c0}\x{12c2}-\x{12c5}\x{12c8}-\x{12d6}\x{12d8}-\x{1310}\x{1312}-\x{1315}\x{1318}-\x{135a}\x{1380}-\x{138f}\x{13a0}-\x{13f4}\x{1401}-\x{166c}\x{166f}-\x{167f}\x{1681}-\x{169a}\x{16a0}-\x{16ea}\x{16ee}-\x{16f0}\x{1700}-\x{170c}\x{170e}-\x{1711}\x{1720}-\x{1731}\x{1740}-\x{1751}\x{1760}-\x{176c}\x{176e}-\x{1770}\x{1780}-\x{17b3}\x{17d7}\x{17dc}\x{1820}-\x{1877}\x{1880}-\x{18a8}\x{18aa}\x{18b0}-\x{18f5}\x{1900}-\x{191c}\x{1950}-\x{196d}\x{1970}-\x{1974}\x{1980}-\x{19ab}\x{19c1}-\x{19c7}\x{1a00}-\x{1a16}\x{1a20}-\x{1a54}\x{1aa7}\x{1b05}-\x{1b33}\x{1b45}-\x{1b4b}\x{1b83}-\x{1ba0}\x{1bae}\x{1baf}\x{1bba}-\x{1be5}\x{1c00}-\x{1c23}\x{1c4d}-\x{1c4f}\x{1c5a}-\x{1c7d}\x{1ce9}-\x{1cec}\x{1cee}-\x{1cf1}\x{1cf5}\x{1cf6}\x{1d00}-\x{1dbf}\x{1e00}-\x{1f15}\x{1f18}-\x{1f1d}\x{1f20}-\x{1f45}\x{1f48}-\x{1f4d}\x{1f50}-\x{1f57}\x{1f59}\x{1f5b}\x{1f5d}\x{1f5f}-\x{1f7d}\x{1f80}-\x{1fb4}\x{1fb6}-\x{1fbc}\x{1fbe}\x{1fc2}-\x{1fc4}\x{1fc6}-\x{1fcc}\x{1fd0}-\x{1fd3}\x{1fd6}-\x{1fdb}\x{1fe0}-\x{1fec}\x{1ff2}-\x{1ff4}\x{1ff6}-\x{1ffc}\x{2071}\x{207f}\x{2090}-\x{209c}\x{2102}\x{2107}\x{210a}-\x{2113}\x{2115}\x{2119}-\x{211d}\x{2124}\x{2126}\x{2128}\x{212a}-\x{212d}\x{212f}-\x{2139}\x{213c}-\x{213f}\x{2145}-\x{2149}\x{214e}\x{2160}-\x{2188}\x{2c00}-\x{2c2e}\x{2c30}-\x{2c5e}\x{2c60}-\x{2ce4}\x{2ceb}-\x{2cee}\x{2cf2}\x{2cf3}\x{2d00}-\x{2d25}\x{2d27}\x{2d2d}\x{2d30}-\x{2d67}\x{2d6f}\x{2d80}-\x{2d96}\x{2da0}-\x{2da6}\x{2da8}-\x{2dae}\x{2db0}-\x{2db6}\x{2db8}-\x{2dbe}\x{2dc0}-\x{2dc6}\x{2dc8}-\x{2dce}\x{2dd0}-\x{2dd6}\x{2dd8}-\x{2dde}\x{2e2f}\x{3005}-\x{3007}\x{3021}-\x{3029}\x{3031}-\x{3035}\x{3038}-\x{303c}\x{3041}-\x{3096}\x{309d}-\x{309f}\x{30a1}-\x{30fa}\x{30fc}-\x{30ff}\x{3105}-\x{312d}\x{3131}-\x{318e}\x{31a0}-\x{31ba}\x{31f0}-\x{31ff}\x{3400}-\x{4db5}\x{4e00}-\x{9fcc}\x{a000}-\x{a48c}\x{a4d0}-\x{a4fd}\x{a500}-\x{a60c}\x{a610}-\x{a61f}\x{a62a}\x{a62b}\x{a640}-\x{a66e}\x{a67f}-\x{a697}\x{a6a0}-\x{a6ef}\x{a717}-\x{a71f}\x{a722}-\x{a788}\x{a78b}-\x{a78e}\x{a790}-\x{a793}\x{a7a0}-\x{a7aa}\x{a7f8}-\x{a801}\x{a803}-\x{a805}\x{a807}-\x{a80a}\x{a80c}-\x{a822}\x{a840}-\x{a873}\x{a882}-\x{a8b3}\x{a8f2}-\x{a8f7}\x{a8fb}\x{a90a}-\x{a925}\x{a930}-\x{a946}\x{a960}-\x{a97c}\x{a984}-\x{a9b2}\x{a9cf}\x{aa00}-\x{aa28}\x{aa40}-\x{aa42}\x{aa44}-\x{aa4b}\x{aa60}-\x{aa76}\x{aa7a}\x{aa80}-\x{aaaf}\x{aab1}\x{aab5}\x{aab6}\x{aab9}-\x{aabd}\x{aac0}\x{aac2}\x{aadb}-\x{aadd}\x{aae0}-\x{aaea}\x{aaf2}-\x{aaf4}\x{ab01}-\x{ab06}\x{ab09}-\x{ab0e}\x{ab11}-\x{ab16}\x{ab20}-\x{ab26}\x{ab28}-\x{ab2e}\x{abc0}-\x{abe2}\x{ac00}-\x{d7a3}\x{d7b0}-\x{d7c6}\x{d7cb}-\x{d7fb}\x{f900}-\x{fa6d}\x{fa70}-\x{fad9}\x{fb00}-\x{fb06}\x{fb13}-\x{fb17}\x{fb1d}\x{fb1f}-\x{fb28}\x{fb2a}-\x{fb36}\x{fb38}-\x{fb3c}\x{fb3e}\x{fb40}\x{fb41}\x{fb43}\x{fb44}\x{fb46}-\x{fbb1}\x{fbd3}-\x{fd3d}\x{fd50}-\x{fd8f}\x{fd92}-\x{fdc7}\x{fdf0}-\x{fdfb}\x{fe70}-\x{fe74}\x{fe76}-\x{fefc}\x{ff21}-\x{ff3a}\x{ff41}-\x{ff5a}\x{ff66}-\x{ffbe}\x{ffc2}-\x{ffc7}\x{ffca}-\x{ffcf}\x{ffd2}-\x{ffd7}\x{ffda}-\x{ffdc}0-9\x{0300}-\x{036f}\x{0483}-\x{0487}\x{0591}-\x{05bd}\x{05bf}\x{05c1}\x{05c2}\x{05c4}\x{05c5}\x{05c7}\x{0610}-\x{061a}\x{064b}-\x{0669}\x{0670}\x{06d6}-\x{06dc}\x{06df}-\x{06e4}\x{06e7}\x{06e8}\x{06ea}-\x{06ed}\x{06f0}-\x{06f9}\x{0711}\x{0730}-\x{074a}\x{07a6}-\x{07b0}\x{07c0}-\x{07c9}\x{07eb}-\x{07f3}\x{0816}-\x{0819}\x{081b}-\x{0823}\x{0825}-\x{0827}\x{0829}-\x{082d}\x{0859}-\x{085b}\x{08e4}-\x{08fe}\x{0900}-\x{0903}\x{093a}-\x{093c}\x{093e}-\x{094f}\x{0951}-\x{0957}\x{0962}\x{0963}\x{0966}-\x{096f}\x{0981}-\x{0983}\x{09bc}\x{09be}-\x{09c4}\x{09c7}\x{09c8}\x{09cb}-\x{09cd}\x{09d7}\x{09e2}\x{09e3}\x{09e6}-\x{09ef}\x{0a01}-\x{0a03}\x{0a3c}\x{0a3e}-\x{0a42}\x{0a47}\x{0a48}\x{0a4b}-\x{0a4d}\x{0a51}\x{0a66}-\x{0a71}\x{0a75}\x{0a81}-\x{0a83}\x{0abc}\x{0abe}-\x{0ac5}\x{0ac7}-\x{0ac9}\x{0acb}-\x{0acd}\x{0ae2}\x{0ae3}\x{0ae6}-\x{0aef}\x{0b01}-\x{0b03}\x{0b3c}\x{0b3e}-\x{0b44}\x{0b47}\x{0b48}\x{0b4b}-\x{0b4d}\x{0b56}\x{0b57}\x{0b62}\x{0b63}\x{0b66}-\x{0b6f}\x{0b82}\x{0bbe}-\x{0bc2}\x{0bc6}-\x{0bc8}\x{0bca}-\x{0bcd}\x{0bd7}\x{0be6}-\x{0bef}\x{0c01}-\x{0c03}\x{0c3e}-\x{0c44}\x{0c46}-\x{0c48}\x{0c4a}-\x{0c4d}\x{0c55}\x{0c56}\x{0c62}\x{0c63}\x{0c66}-\x{0c6f}\x{0c82}\x{0c83}\x{0cbc}\x{0cbe}-\x{0cc4}\x{0cc6}-\x{0cc8}\x{0cca}-\x{0ccd}\x{0cd5}\x{0cd6}\x{0ce2}\x{0ce3}\x{0ce6}-\x{0cef}\x{0d02}\x{0d03}\x{0d3e}-\x{0d44}\x{0d46}-\x{0d48}\x{0d4a}-\x{0d4d}\x{0d57}\x{0d62}\x{0d63}\x{0d66}-\x{0d6f}\x{0d82}\x{0d83}\x{0dca}\x{0dcf}-\x{0dd4}\x{0dd6}\x{0dd8}-\x{0ddf}\x{0df2}\x{0df3}\x{0e31}\x{0e34}-\x{0e3a}\x{0e47}-\x{0e4e}\x{0e50}-\x{0e59}\x{0eb1}\x{0eb4}-\x{0eb9}\x{0ebb}\x{0ebc}\x{0ec8}-\x{0ecd}\x{0ed0}-\x{0ed9}\x{0f18}\x{0f19}\x{0f20}-\x{0f29}\x{0f35}\x{0f37}\x{0f39}\x{0f3e}\x{0f3f}\x{0f71}-\x{0f84}\x{0f86}\x{0f87}\x{0f8d}-\x{0f97}\x{0f99}-\x{0fbc}\x{0fc6}\x{102b}-\x{103e}\x{1040}-\x{1049}\x{1056}-\x{1059}\x{105e}-\x{1060}\x{1062}-\x{1064}\x{1067}-\x{106d}\x{1071}-\x{1074}\x{1082}-\x{108d}\x{108f}-\x{109d}\x{135d}-\x{135f}\x{1712}-\x{1714}\x{1732}-\x{1734}\x{1752}\x{1753}\x{1772}\x{1773}\x{17b4}-\x{17d3}\x{17dd}\x{17e0}-\x{17e9}\x{180b}-\x{180d}\x{1810}-\x{1819}\x{18a9}\x{1920}-\x{192b}\x{1930}-\x{193b}\x{1946}-\x{194f}\x{19b0}-\x{19c0}\x{19c8}\x{19c9}\x{19d0}-\x{19d9}\x{1a17}-\x{1a1b}\x{1a55}-\x{1a5e}\x{1a60}-\x{1a7c}\x{1a7f}-\x{1a89}\x{1a90}-\x{1a99}\x{1b00}-\x{1b04}\x{1b34}-\x{1b44}\x{1b50}-\x{1b59}\x{1b6b}-\x{1b73}\x{1b80}-\x{1b82}\x{1ba1}-\x{1bad}\x{1bb0}-\x{1bb9}\x{1be6}-\x{1bf3}\x{1c24}-\x{1c37}\x{1c40}-\x{1c49}\x{1c50}-\x{1c59}\x{1cd0}-\x{1cd2}\x{1cd4}-\x{1ce8}\x{1ced}\x{1cf2}-\x{1cf4}\x{1dc0}-\x{1de6}\x{1dfc}-\x{1dff}\x{200c}\x{200d}\x{203f}\x{2040}\x{2054}\x{20d0}-\x{20dc}\x{20e1}\x{20e5}-\x{20f0}\x{2cef}-\x{2cf1}\x{2d7f}\x{2de0}-\x{2dff}\x{302a}-\x{302f}\x{3099}\x{309a}\x{a620}-\x{a629}\x{a66f}\x{a674}-\x{a67d}\x{a69f}\x{a6f0}\x{a6f1}\x{a802}\x{a806}\x{a80b}\x{a823}-\x{a827}\x{a880}\x{a881}\x{a8b4}-\x{a8c4}\x{a8d0}-\x{a8d9}\x{a8e0}-\x{a8f1}\x{a900}-\x{a909}\x{a926}-\x{a92d}\x{a947}-\x{a953}\x{a980}-\x{a983}\x{a9b3}-\x{a9c0}\x{a9d0}-\x{a9d9}\x{aa29}-\x{aa36}\x{aa43}\x{aa4c}\x{aa4d}\x{aa50}-\x{aa59}\x{aa7b}\x{aab0}\x{aab2}-\x{aab4}\x{aab7}\x{aab8}\x{aabe}\x{aabf}\x{aac1}\x{aaeb}-\x{aaef}\x{aaf5}\x{aaf6}\x{abe3}-\x{abea}\x{abec}\x{abed}\x{abf0}-\x{abf9}\x{fb1e}\x{fe00}-\x{fe0f}\x{fe20}-\x{fe26}\x{fe33}\x{fe34}\x{fe4d}-\x{fe4f}\x{ff10}-\x{ff19}\x{ff3f}]*\b'">
    <docblock>
      <description compact="Var-matching regex based on http://stackoverflow.com/a/9337047/802993.">Note that regular expressions using that bit must have the PCRE_UTF8
pattern modifier (/u) set.</description>
      <var type="string"/>
    </docblock>
  </constant>
  <member name="keywordsReserved" type="array" default="" visibility="protected" static="false" line="35">
    <docblock>
      <description compact="Full list of JavaScript reserved words.">Will be loaded from /data/js/keywords_reserved.txt.</description>
      <see value="https://mathiasbynens.be/notes/reserved-keywords"/>
      <var type="array" of="object">
        <type full="MatthiasMullie\Minify\string" namespace="MatthiasMullie\Minify" name="string"/>
      </var>
    </docblock>
  </member>
  <member name="keywordsBefore" type="array" default="" visibility="protected" static="false" line="50">
    <docblock>
      <description compact="List of JavaScript reserved words that accept a &lt;variable, value, ...&gt; after them. Some end of lines are not the end of a statement, like with these keywords.">E.g.: we shouldn't insert a ; after this else
else
    console.log('this is quite fine')

Will be loaded from /data/js/keywords_before.txt</description>
      <var type="array" of="object">
        <type full="MatthiasMullie\Minify\string" namespace="MatthiasMullie\Minify" name="string"/>
      </var>
    </docblock>
  </member>
  <member name="keywordsAfter" type="array" default="" visibility="protected" static="false" line="65">
    <docblock>
      <description compact="List of JavaScript reserved words that accept a &lt;variable, value, ...&gt; before them. Some end of lines are not the end of a statement, like when continued by one of these keywords on the newline.">E.g.: we shouldn't insert a ; before this instanceof
variable
    instanceof String

Will be loaded from /data/js/keywords_after.txt</description>
      <var type="array" of="object">
        <type full="MatthiasMullie\Minify\string" namespace="MatthiasMullie\Minify" name="string"/>
      </var>
    </docblock>
  </member>
  <member name="operatorsBefore" type="array" default="" visibility="protected" static="false" line="82">
    <docblock>
      <description compact="List of JavaScript operators that accept a &lt;variable, value, ...&gt; after them. Some end of lines are not the end of a statement, like with these operators.">Note: Most operators are fine, we've only removed !, ++ and --.
There can't be a newline separating ! and whatever it is negating.
++ &amp; -- have to be joined with the value they're in-/decrementing.

Will be loaded from /data/js/operators_before.txt</description>
      <see value="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators"/>
      <var type="array" of="object">
        <type full="MatthiasMullie\Minify\string" namespace="MatthiasMullie\Minify" name="string"/>
      </var>
    </docblock>
  </member>
  <member name="operatorsAfter" type="array" default="" visibility="protected" static="false" line="100">
    <docblock>
      <description compact="List of JavaScript operators that accept a &lt;variable, value, ...&gt; before them. Some end of lines are not the end of a statement, like when continued by one of these operators on the newline.">Note: Most operators are fine, we've only removed ), ], ++ and --.
++ &amp; -- have to be joined with the value they're in-/decrementing.
) &amp; ] are "special" in that they have lots or usecases. () for example
is used for function calls, for grouping, in if () and for (), ...

Will be loaded from /data/js/operators_after.txt</description>
      <see value="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators"/>
      <var type="array" of="object">
        <type full="MatthiasMullie\Minify\string" namespace="MatthiasMullie\Minify" name="string"/>
      </var>
    </docblock>
  </member>
  <constructor name="__construct" start="105" end="116" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="{@inheritdoc}"/>
    </docblock>
  </constructor>
  <method name="execute" start="126" end="170" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Minify the data.">Perform JS optimizations.</description>
      <param description="Path to write the data to." type="object" variable="$path">
        <type full="MatthiasMullie\Minify\string[optional]" namespace="MatthiasMullie\Minify" name="string[optional]"/>
      </param>
      <return description="The minified data." type="string"/>
    </docblock>
    <parameter name="path" byreference="false" type="{unknown}" default="" constant="null"/>
    <inline>
      <comment value="loop files" line="130"/>
      <comment value="Let's first take out strings, comments and regular expressions." line="143"/>
      <comment xmlns="http://xml.phpdox.net/src" value="All of these can contain JS code-like characters, and we should make" line="144"/>
      <comment xmlns="http://xml.phpdox.net/src" value="sure any further magic ignores anything inside of these." line="145"/>
      <comment xmlns="http://xml.phpdox.net/src" value="Consider this example, where we should not strip any whitespace:" line="147"/>
      <comment xmlns="http://xml.phpdox.net/src" value="Comments will be removed altogether, strings and regular expressions" line="148"/>
      <comment xmlns="http://xml.phpdox.net/src" value="will be replaced by placeholder text, which we'll restore later." line="149"/>
      <comment value="Earlier, we extracted strings &amp; regular expressions and replaced them" line="163"/>
      <comment xmlns="http://xml.phpdox.net/src" value="with placeholder text. This will restore them." line="164"/>
    </inline>
  </method>
  <method name="stripComments" start="175" end="182" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Strip comments from source code."/>
    </docblock>
    <inline>
      <comment value="single-line comments" line="177"/>
      <comment value="multi-line comments" line="180"/>
    </inline>
  </method>
  <method name="extractRegex" start="201" end="227" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="JS can have /-delimited regular expressions, like: /ab+c/.match(string).">The content inside the regex can contain characters that may be confused
for JS code: e.g. it could contain whitespace it needs to match &amp; we
don't want to strip whitespace in there.

The regex can be pretty simple: we don't have to care about comments,
(which also use slashes) because stripComments() will have stripped those
already.

This method will replace all string content with simple REGEX#
placeholder text, so we've rid all regular expressions from characters
that may be misinterpreted. Original regex content will be saved in
$this-&gt;extracted and after doing all other minifying, we can restore the
original content via restoreRegex()</description>
    </docblock>
    <inline>
      <comment value="PHP only supports $this inside anonymous functions since 5.4" line="203"/>
      <comment value="it's a regex if we can find an opening and (not escaped) closing /," line="213"/>
      <comment value="include \n because it may be there for a reason" line="214"/>
      <comment value="(https://github.com/matthiasmullie/minify/issues/56)" line="215"/>
      <comment value="/ can't be preceded by variable, value, or similar because then" line="218"/>
      <comment value="it's going to be division" line="219"/>
      <comment value="checking for that is complex, so we'll do inverse:" line="220"/>
      <comment value="* at the beginning of the file, it's not division, but regex" line="221"/>
      <comment value="* following another operator, it's not division, but regex" line="223"/>
    </inline>
  </method>
  <method name="stripWhitespace" start="245" end="339" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Strip whitespace.">We won't strip *all* whitespace, but as much as possible. The thing that
we'll preserve are newlines we're unsure about.
JavaScript doesn't require statements to be terminated with a semicolon.
It will automatically fix missing semicolons with ASI (automatic semi-
colon insertion) at the end of line causing errors (without semicolon.)

Because it's sometimes hard to tell if a newline is part of a statement
that should be terminated or not, we'll just leave some of them alone.</description>
      <param description="The content to strip the whitespace for." type="string" variable="$content"/>
      <return type="string"/>
    </docblock>
    <parameter name="content" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="uniform line endings, make them all line feed" line="247"/>
      <comment value="collapse all non-line feed whitespace into a single space" line="250"/>
      <comment value="strip leading &amp; trailing whitespace" line="253"/>
      <comment value="collapse consecutive line feeds into just 1" line="256"/>
      <comment value="strip whitespace that ends in (or next line begin with) an operator" line="263"/>
      <comment value="that allows statements to be broken up over multiple lines" line="264"/>
      <comment value="make sure + and - can't be mistaken for, or joined into ++ and --" line="273"/>
      <comment value="We didn't strip whitespace after a couple of operators because they" line="281"/>
      <comment xmlns="http://xml.phpdox.net/src" value="could be used in different contexts and we can't be sure it's ok to" line="282"/>
      <comment xmlns="http://xml.phpdox.net/src" value="strip the newlines. However, we can safely strip any non-line feed" line="283"/>
      <comment xmlns="http://xml.phpdox.net/src" value="whitespace that follows them." line="284"/>
      <comment value="collapse whitespace around reserved words into single space" line="289"/>
      <comment value="Get rid of double semicolons, except where they can be used like:" line="295"/>
      <comment xmlns="http://xml.phpdox.net/src" value="&quot;for(v=1,_=b;;)&quot;, &quot;for(v=1;;v++)&quot; or &quot;for(;;ja||(ja=true))&quot;." line="296"/>
      <comment xmlns="http://xml.phpdox.net/src" value="I'll safeguard these double semicolons inside for-loops by" line="297"/>
      <comment xmlns="http://xml.phpdox.net/src" value="temporarily replacing them with an invalid condition: they won't have" line="298"/>
      <comment xmlns="http://xml.phpdox.net/src" value="a double semicolon and will be easy to spot to restore afterwards." line="299"/>
      <comment value="Next, we'll be removing all semicolons where ASI kicks in." line="306"/>
      <comment xmlns="http://xml.phpdox.net/src" value="for-loops however, can have an empty body (ending in only a" line="307"/>
      <comment xmlns="http://xml.phpdox.net/src" value="semicolon), like: `for(i=1;i&lt;3;i++);`" line="308"/>
      <comment xmlns="http://xml.phpdox.net/src" value="Here, nothing happens during the loop; it's just used to keep" line="309"/>
      <comment xmlns="http://xml.phpdox.net/src" value="increasing `i`. With that ; omitted, the next line would be expected" line="310"/>
      <comment xmlns="http://xml.phpdox.net/src" value="to be the for-loop's body..." line="311"/>
      <comment xmlns="http://xml.phpdox.net/src" value="I'm going to double that semicolon (if any) so after the next line," line="312"/>
      <comment xmlns="http://xml.phpdox.net/src" value="which strips semicolons here &amp; there, we're still left with this one." line="313"/>
      <comment value="We also can't strip empty else-statements. Even though they're" line="318"/>
      <comment xmlns="http://xml.phpdox.net/src" value="useless and probably shouldn't be in the code in the first place, we" line="319"/>
      <comment xmlns="http://xml.phpdox.net/src" value="shouldn't be stripping the `;` that follows it as it breaks the code." line="320"/>
      <comment xmlns="http://xml.phpdox.net/src" value="We can just remove those useless else-statements completely." line="321"/>
      <comment xmlns="http://xml.phpdox.net/src" value="@see https://github.com/matthiasmullie/minify/issues/91" line="322"/>
      <comment value="We also don't really want to terminate statements followed by closing" line="328"/>
      <comment xmlns="http://xml.phpdox.net/src" value="curly braces (which we've ignored completely up until now) or end-of-" line="329"/>
      <comment xmlns="http://xml.phpdox.net/src" value="script: ASI will kick in here &amp; we're all about minifying." line="330"/>
      <comment xmlns="http://xml.phpdox.net/src" value="Semicolons at beginning of the file don't make any sense either." line="331"/>
      <comment value="get rid of remaining whitespace af beginning/end" line="337"/>
    </inline>
  </method>
  <method name="getOperatorsForRegex" start="350" end="370" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="We'll strip whitespace around certain operators with regular expressions.">This will prepare the given array by escaping all characters.</description>
      <param type="array" variable="$operators" of="object">
        <type full="MatthiasMullie\Minify\string" namespace="MatthiasMullie\Minify" name="string"/>
      </param>
      <param type="string" variable="$delimiter"/>
      <return type="array" of="object">
        <type full="MatthiasMullie\Minify\string" namespace="MatthiasMullie\Minify" name="string"/>
      </return>
    </docblock>
    <parameter name="operators" byreference="false" type="array"/>
    <parameter name="delimiter" byreference="false" type="string" default="'/'"/>
    <inline>
      <comment value="escape operators for use in regex" line="352"/>
      <comment value="ignore + &amp; - for now, they'll get special treatment" line="358"/>
      <comment value="dot can not just immediately follow a number; it can be confused for" line="361"/>
      <comment value="decimal point, or calling a method on it, e.g. 42 .toString()" line="362"/>
      <comment value="don't confuse = with other assignment shortcuts (e.g. +=)" line="365"/>
    </inline>
  </method>
  <method name="getKeywordsForRegex" start="381" end="395" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="We'll strip whitespace around certain keywords with regular expressions.">This will prepare the given array by escaping all characters.</description>
      <param type="array" variable="$keywords" of="object">
        <type full="MatthiasMullie\Minify\string" namespace="MatthiasMullie\Minify" name="string"/>
      </param>
      <param type="string" variable="$delimiter"/>
      <return type="array" of="object">
        <type full="MatthiasMullie\Minify\string" namespace="MatthiasMullie\Minify" name="string"/>
      </return>
    </docblock>
    <parameter name="keywords" byreference="false" type="array"/>
    <parameter name="delimiter" byreference="false" type="string" default="'/'"/>
    <inline>
      <comment value="escape keywords for use in regex" line="383"/>
      <comment value="add word boundaries" line="387"/>
    </inline>
  </method>
  <method name="propertyNotation" start="404" end="454" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Replaces all occurrences of array['key'] by array.key."/>
      <param type="string" variable="$content"/>
      <return type="string"/>
    </docblock>
    <parameter name="content" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="PHP only supports $this inside anonymous functions since 5.4" line="406"/>
      <comment value="Figure out if previous character is a variable name (of the array" line="433"/>
      <comment xmlns="http://xml.phpdox.net/src" value="we want to use property notation on) - this is to make sure" line="434"/>
      <comment xmlns="http://xml.phpdox.net/src" value="standalone ['value'] arrays aren't confused for keys-of-an-array." line="435"/>
      <comment xmlns="http://xml.phpdox.net/src" value="We can (and only have to) check the last character, because PHP's" line="436"/>
      <comment xmlns="http://xml.phpdox.net/src" value="regex implementation doesn't allow unfixed-length look-behind" line="437"/>
      <comment xmlns="http://xml.phpdox.net/src" value="assertions." line="438"/>
      <comment value="Make sure word preceding the ['value'] is not a keyword, e.g." line="444"/>
      <comment xmlns="http://xml.phpdox.net/src" value="return['x']. Because -again- PHP's regex implementation doesn't allow" line="445"/>
      <comment xmlns="http://xml.phpdox.net/src" value="unfixed-length look-behind assertions, I'm just going to do a lot of" line="446"/>
      <comment xmlns="http://xml.phpdox.net/src" value="separate look-behind assertions, one for each keyword." line="447"/>
    </inline>
  </method>
  <method name="shortenBools" start="463" end="497" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Replaces true &amp; false by !0 and !1."/>
      <param type="string" variable="$content"/>
      <return type="string"/>
    </docblock>
    <parameter name="content" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="for(;;) is exactly the same as while(true)" line="468"/>
      <comment value="now make sure we didn't turn any do ... while(true) into do ... for(;;)" line="471"/>
      <comment value="go backward to make sure positional offsets aren't altered when $content changes" line="474"/>
    </inline>
  </method>
  <parent full="MatthiasMullie\Minify\Minify" namespace="MatthiasMullie\Minify" name="Minify">
    <member name="data" type="array" default="" visibility="protected" static="false" line="24">
      <docblock>
        <description compact="The data to be minified."/>
        <var type="array" of="object">
          <type full="MatthiasMullie\Minify\string" namespace="MatthiasMullie\Minify" name="string"/>
        </var>
      </docblock>
    </member>
    <member name="patterns" type="array" default="" visibility="protected" static="false" line="31">
      <docblock>
        <description compact="Array of patterns to match."/>
        <var type="array" of="object">
          <type full="MatthiasMullie\Minify\string" namespace="MatthiasMullie\Minify" name="string"/>
        </var>
      </docblock>
    </member>
    <member name="extracted" type="array" default="" visibility="public" static="false" line="40">
      <docblock>
        <description compact="This array will hold content of strings and regular expressions that have been extracted from the JS source code, so we can reliably match &quot;code&quot;, without having to worry about potential &quot;code-like&quot; characters inside."/>
        <var type="array" of="object">
          <type full="MatthiasMullie\Minify\string" namespace="MatthiasMullie\Minify" name="string"/>
        </var>
      </docblock>
    </member>
    <constructor name="__construct" start="45" end="51" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Init the minify class - optionally, code may be passed along already."/>
      </docblock>
      <inline>
        <comment value="it's possible to add the source through the constructor as well ;)" line="47"/>
      </inline>
    </constructor>
    <method name="add" start="58" end="78" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Add a file or straight-up code to be minified."/>
        <param type="string" variable="$data"/>
      </docblock>
      <parameter name="data" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="bogus &quot;usage&quot; of parameter $data: scrutinizer warns this variable is" line="60"/>
        <comment value="not used (we're using func_get_args instead to support overloading)," line="61"/>
        <comment value="but it still needs to be defined because it makes no sense to have" line="62"/>
        <comment value="this function without argument :)" line="63"/>
        <comment value="this method can be overloaded" line="66"/>
      </inline>
    </method>
    <method name="minify" start="87" end="97" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Minify the data &amp; (optionally) saves it to a file."/>
        <param description="Path to write the data to." type="object" variable="$path">
          <type full="MatthiasMullie\Minify\string[optional]" namespace="MatthiasMullie\Minify" name="string[optional]"/>
        </param>
        <return description="The minified data." type="string"/>
      </docblock>
      <parameter name="path" byreference="false" type="{unknown}" default="" constant="null"/>
      <inline>
        <comment value="save to path" line="91"/>
      </inline>
    </method>
    <method name="gzip" start="107" end="118" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Minify &amp; gzip the data &amp; (optionally) saves it to a file."/>
        <param description="Path to write the data to." type="object" variable="$path">
          <type full="MatthiasMullie\Minify\string[optional]" namespace="MatthiasMullie\Minify" name="string[optional]"/>
        </param>
        <param description="Compression level, from 0 to 9." type="object" variable="$level">
          <type full="MatthiasMullie\Minify\int[optional]" namespace="MatthiasMullie\Minify" name="int[optional]"/>
        </param>
        <return description="The minified &amp; gzipped data." type="string"/>
      </docblock>
      <parameter name="path" byreference="false" type="{unknown}" default="" constant="null"/>
      <parameter name="level" byreference="false" type="integer" default="9"/>
      <inline>
        <comment value="save to path" line="112"/>
      </inline>
    </method>
    <method name="cache" start="127" end="133" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Minify the data &amp; write it to a CacheItemInterface object."/>
        <param description="Cache item to write the data to." type="object" variable="$item">
          <type full="Psr\Cache\CacheItemInterface" namespace="Psr\Cache" name="CacheItemInterface"/>
        </param>
        <return description="Cache item with the minifier data." type="object">
          <type full="Psr\Cache\CacheItemInterface" namespace="Psr\Cache" name="CacheItemInterface"/>
        </return>
      </docblock>
      <parameter name="item" byreference="false" type="object">
        <type full="Psr\Cache\CacheItemInterface" namespace="Psr\Cache" name="CacheItemInterface"/>
      </parameter>
    </method>
    <method name="execute" start="142" end="142" abstract="true" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Minify the data."/>
        <param description="Path to write the data to." type="object" variable="$path">
          <type full="MatthiasMullie\Minify\string[optional]" namespace="MatthiasMullie\Minify" name="string[optional]"/>
        </param>
        <return description="The minified data." type="string"/>
      </docblock>
      <parameter name="path" byreference="false" type="{unknown}" default="" constant="null"/>
    </method>
    <method name="load" start="151" end="164" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Load data."/>
        <param description="Either a path to a file or the content itself." type="string" variable="$data"/>
        <return type="string"/>
      </docblock>
      <parameter name="data" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="check if the data is a file" line="153"/>
      </inline>
    </method>
    <method name="save" start="174" end="181" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Save to file."/>
        <param description="The minified data." type="string" variable="$content"/>
        <param description="The path to save the minified data to." type="string" variable="$path"/>
        <throws type="object">
          <type full="MatthiasMullie\Minify\Exceptions\IOException" namespace="MatthiasMullie\Minify\Exceptions" name="IOException"/>
        </throws>
      </docblock>
      <parameter name="content" byreference="false" type="{unknown}"/>
      <parameter name="path" byreference="false" type="{unknown}"/>
    </method>
    <method name="registerPattern" start="189" end="195" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Register a pattern to execute against the source content."/>
        <param description="PCRE pattern." type="string" variable="$pattern"/>
        <param description="Replacement value for matched pattern." type="object" variable="$replacement">
          <type full="MatthiasMullie\Minify\string|callable" namespace="MatthiasMullie\Minify" name="string|callable"/>
        </param>
      </docblock>
      <parameter name="pattern" byreference="false" type="{unknown}"/>
      <parameter name="replacement" byreference="false" type="string" default="''"/>
      <inline>
        <comment value="study the pattern, we'll execute it more than once" line="191"/>
      </inline>
    </method>
    <method name="replace" start="209" end="279" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="We can't &quot;just&quot; run some regular expressions against JavaScript: it's a complex language. E.g. having an occurrence of // xyz would be a comment, unless it's used within a string. Of you could have something that looks like a 'string', but inside a comment.">The only way to accurately replace these pieces is to traverse the JS one
character at a time and try to find whatever starts first.</description>
        <param description="The content to replace patterns in." type="string" variable="$content"/>
        <return description="The (manipulated) content." type="string"/>
      </docblock>
      <parameter name="content" byreference="false" type="{unknown}"/>
    </method>
    <method name="replacePattern" start="293" end="300" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="This is where a pattern is matched against $content and the matches are replaced by their respective value.">This function will be called plenty of times, where $content will always
move up 1 character.</description>
        <param description="Pattern to match." type="string" variable="$pattern"/>
        <param description="Replacement value." type="object" variable="$replacement">
          <type full="MatthiasMullie\Minify\string|callable" namespace="MatthiasMullie\Minify" name="string|callable"/>
        </param>
        <param description="Content to match pattern against." type="string" variable="$content"/>
        <return type="string"/>
      </docblock>
      <parameter name="pattern" byreference="false" type="{unknown}"/>
      <parameter name="replacement" byreference="false" type="{unknown}"/>
      <parameter name="content" byreference="false" type="{unknown}"/>
    </method>
    <method name="extractStrings" start="315" end="351" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Strings are a pattern we need to match, in order to ignore potential code-like content inside them, but we just want all of the string content to remain untouched.">This method will replace all string content with simple STRING#
placeholder text, so we've rid all strings from characters that may be
misinterpreted. Original string content will be saved in $this-&gt;extracted
and after doing all other minifying, we can restore the original content
via restoreStrings().</description>
        <param type="object" variable="$chars">
          <type full="MatthiasMullie\Minify\string[optional]" namespace="MatthiasMullie\Minify" name="string[optional]"/>
        </param>
      </docblock>
      <parameter name="chars" byreference="false" type="string" default="'\'&quot;'"/>
      <inline>
        <comment value="PHP only supports $this inside anonymous functions since 5.4" line="317"/>
        <comment value="The \\ messiness explained:" line="338"/>
        <comment xmlns="http://xml.phpdox.net/src" value="* Don't count ' or &quot; as end-of-string if it's escaped (has backslash" line="339"/>
        <comment xmlns="http://xml.phpdox.net/src" value="in front of it)" line="340"/>
        <comment xmlns="http://xml.phpdox.net/src" value="* Unless... that backslash itself is escaped (another leading slash)," line="341"/>
        <comment xmlns="http://xml.phpdox.net/src" value="in which case it's no longer escaping the ' or &quot;" line="342"/>
        <comment xmlns="http://xml.phpdox.net/src" value="* So there can be either no backslash, or an even number" line="343"/>
        <comment xmlns="http://xml.phpdox.net/src" value="* multiply all of that times 4, to account for the escaping that has" line="344"/>
        <comment xmlns="http://xml.phpdox.net/src" value="to be done to pass the backslash into the PHP string without it being" line="345"/>
        <comment xmlns="http://xml.phpdox.net/src" value="considered as escape-char (times 2) and to get it in the regex," line="346"/>
        <comment xmlns="http://xml.phpdox.net/src" value="escaped (times 2)" line="347"/>
      </inline>
    </method>
    <method name="restoreExtractedData" start="362" end="374" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="This method will restore all extracted data (strings, regexes) that were replaced with placeholder text in extract*(). The original content was saved in $this-&gt;extracted."/>
        <param type="string" variable="$content"/>
        <return type="string"/>
      </docblock>
      <parameter name="content" byreference="false" type="{unknown}"/>
    </method>
    <method name="canImportFile" start="383" end="386" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Check if the path is a regular file and can be read."/>
        <param type="string" variable="$path"/>
        <return type="object">
          <type full="MatthiasMullie\Minify\bool" namespace="MatthiasMullie\Minify" name="bool"/>
        </return>
      </docblock>
      <parameter name="path" byreference="false" type="{unknown}"/>
    </method>
    <method name="openFileForWriting" start="397" end="404" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Attempts to open file specified by $path for writing."/>
        <param description="The path to the file." type="string" variable="$path"/>
        <return description="Specifier for the target file." type="resource"/>
        <throws type="object">
          <type full="MatthiasMullie\Minify\Exceptions\IOException" namespace="MatthiasMullie\Minify\Exceptions" name="IOException"/>
        </throws>
      </docblock>
      <parameter name="path" byreference="false" type="{unknown}"/>
    </method>
    <method name="writeToFile" start="415" end="420" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Attempts to write $content to the file specified by $handler. $path is used for printing exceptions."/>
        <param description="The resource to write to." type="resource" variable="$handler"/>
        <param description="The content to write." type="string" variable="$content"/>
        <param description="The path to the file (for exception printing only)." type="string" variable="$path"/>
        <throws type="object">
          <type full="MatthiasMullie\Minify\Exceptions\IOException" namespace="MatthiasMullie\Minify\Exceptions" name="IOException"/>
        </throws>
      </docblock>
      <parameter name="handler" byreference="false" type="{unknown}"/>
      <parameter name="content" byreference="false" type="{unknown}"/>
      <parameter name="path" byreference="false" type="string" default="''"/>
    </method>
  </parent>
</class>
